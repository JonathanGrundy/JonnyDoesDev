{"componentChunkName":"component---src-templates-post-js","path":"/var-let-const","webpackCompilationHash":"","result":{"data":{"markdownRemark":{"html":"<p>So today i learn't <code class=\"language-text\">var</code> <code class=\"language-text\">let</code> and <code class=\"language-text\">const</code>.</p>\n<p>Variables can be changed at any time.</p>\n<p>Firstly <code class=\"language-text\">var</code>. <code class=\"language-text\">var</code> is a reserved key word, and you are not able to create a variable using <code class=\"language-text\">var</code>, so you must create a variable using something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> notKeyWord<span class=\"token punctuation\">;</span></code></pre></div>\n<p>All Variables must have their own unique name as this will interfere and override one another, unless they are in their own scope.</p>\n<p>With VAR you must first declare what VAR is for example so that it doesn't return undefined.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a<span class=\"token punctuation\">;</span></code></pre></div>\n<p>And then intialise it with a value such as 99.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a<span class=\"token punctuation\">;</span>\na <span class=\"token operator\">=</span> <span class=\"token number\">99</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You can declare different variables on a single line, but this isn't common practise as it isn't very clear. So you would ideally create a variable as:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">99</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Variables can be objects, arrays and string as well as numbers.</p>\n<p>Hoisting is essentially bringing the variable name to the top of the script declaration.</p>\n<p>Next is Let. The main difference between let and var is scoping. So when a let key word is inside of a block scope it becomes inaccessible. Whereas a var is function scoped.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token number\">456</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This would run var a but would not run let b as this is not defined as the let function is not blocked with the console log. This would bring up an error message saying that it isn't defined.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token number\">456</span><span class=\"token punctuation\">;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And then this would console log as we would expect it to as let is blocked. Also let is not hoisted so that means that if you were to create a console.log above a let variable it wouldn't be able to read it and then create an error message.</p>\n<p>Lastly i looked at a const key word. Using a const variable means that there will be any rebinding.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\tname<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Jonny\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Var is no longer commonly used as let and const have surpassed it as they are easier and less buggy then var.</p>","timeToRead":2,"excerpt":"So today i learn't   and . Variables can be changed at any time. Firstly .  is a reserved key word, and you are not able to create aâ€¦","frontmatter":{"title":"Var Let Const","cover":"https://unsplash.it/400/300/?random?TheFallenTime","date":"2019-11-07T00:00:00.000Z","categories":["Tech","React"],"tags":["test","something","tagging"]},"fields":{"slug":"/var-let-const","date":"November 07, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/var-let-const","nexttitle":"Learning to Debug early on","nextslug":"/learning-to-debug-early-on","prevtitle":"Learning to Debug early on","prevslug":"/learning-to-debug-early-on"}}}